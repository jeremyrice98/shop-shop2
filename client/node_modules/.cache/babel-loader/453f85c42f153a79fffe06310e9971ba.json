{"ast":null,"code":"import { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from \"./actions\";\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: ''\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    //if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n    //if it's none of these actions, do not update state at all and keep things the same!\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/jeremyrice/projects/Weekly/shop-shop2/client/src/utils/reducers.js"],"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","initialState","products","cart","cartOpen","categories","currentCategory","reducer","state","action","type","product","newState","filter","_id","length","map","purchaseQuantity"],"mappings":"AAAA,SACIA,eADJ,EAEIC,iBAFJ,EAGIC,uBAHJ,EAIIC,WAJJ,EAKIC,oBALJ,EAMIC,gBANJ,EAOIC,oBAPJ,EAQIC,UARJ,EASIC,WATJ,QAUO,WAVP;AAYA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,IAAI,EAAE,EAFW;AAGjBC,EAAAA,QAAQ,EAAE,KAHO;AAIjBC,EAAAA,UAAU,EAAE,EAJK;AAKjBC,EAAAA,eAAe,EAAE;AALA,CAArB;;AAQA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAKlB,eAAL;AACI,aAAO,EACH,GAAGgB,KADA;AAEHN,QAAAA,QAAQ,EAAE,CAAC,GAAGO,MAAM,CAACP,QAAX;AAFP,OAAP;;AAIJ,SAAKT,iBAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHH,QAAAA,UAAU,EAAE,CAAC,GAAGI,MAAM,CAACJ,UAAX;AAFT,OAAP;;AAIJ,SAAKX,uBAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHF,QAAAA,eAAe,EAAEG,MAAM,CAACH;AAFrB,OAAP;;AAIJ,SAAKX,WAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHJ,QAAAA,QAAQ,EAAE,IAFP;AAGHD,QAAAA,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgBM,MAAM,CAACE,OAAvB;AAHH,OAAP;;AAKJ,SAAKf,oBAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHL,QAAAA,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgB,GAAGM,MAAM,CAACP,QAA1B;AAFH,OAAP;;AAIJ,SAAKL,gBAAL;AACI,UAAIe,QAAQ,GAAGJ,KAAK,CAACL,IAAN,CAAWU,MAAX,CAAkBF,OAAO,IAAI;AACxC,eAAOA,OAAO,CAACG,GAAR,KAAgBL,MAAM,CAACK,GAA9B;AACH,OAFc,CAAf;AAIA,aAAO,EACH,GAAGN,KADA;AAEHJ,QAAAA,QAAQ,EAAEQ,QAAQ,CAACG,MAAT,GAAkB,CAFzB;AAGHZ,QAAAA,IAAI,EAAES;AAHH,OAAP;;AAKJ,SAAKd,oBAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHJ,QAAAA,QAAQ,EAAE,IAFP;AAGHD,QAAAA,IAAI,EAAEK,KAAK,CAACL,IAAN,CAAWa,GAAX,CAAeL,OAAO,IAAI;AAC5B,cAAIF,MAAM,CAACK,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;AAC5BH,YAAAA,OAAO,CAACM,gBAAR,GAA2BR,MAAM,CAACQ,gBAAlC;AACH;;AACD,iBAAON,OAAP;AACH,SALK;AAHH,OAAP;;AAUJ,SAAKZ,UAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHJ,QAAAA,QAAQ,EAAE,KAFP;AAGHD,QAAAA,IAAI,EAAE;AAHH,OAAP;;AAKJ,SAAKH,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHJ,QAAAA,QAAQ,EAAE,CAACI,KAAK,CAACJ;AAFd,OAAP;AAIJ;;AACA;AACI,aAAOI,KAAP;AA9DR;AAgEH,CAjED;;AAmEA,eAAeD,OAAf","sourcesContent":["import {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from \"./actions\";\n\nconst initialState = {\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '',\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        //if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products],\n            };\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories],\n            };\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products]\n            };\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            }\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if (action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product\n                })\n            }\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n        //if it's none of these actions, do not update state at all and keep things the same!\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}